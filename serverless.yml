service: anchorfm-site-generator

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1 # CloudFront Distribution only supports ACM certificate issued in us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:PutObjectAcl
      Resource:
        Fn::Join:
        - ""
        - - "arn:aws:s3:::"
          - Ref : "StaticSiteBucket"
          - "/*"

custom:
  anchorId: YOUR_ANCHOR_ID
  s3BucketName: YOUR_BUCKET_NAME
  domain: YOUR_DOMAIN
  aliasHostedZone: Z2FDTNDATAQYW2 # CloudFormation Distribution hosted zone id

resources:
  Resources:
    StaticSiteBucket:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.s3BucketName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: StaticSiteBucket
        PolicyDocument:
          Statement:
            - Sid: PublicReadGetObject
              Effect: Allow
              Principal: "*"
              Action:
              - s3:GetObject
              Resource:
                Fn::Join:
                - ""
                - - "arn:aws:s3:::"
                  - Ref: "StaticSiteBucket"
                  - "/*"
    HostedZone:
      Type: AWS::Route53::HostedZone
      Properties:
        Name: ${self:custom.domain}
    CertificateManagerCertificate:
      Type: AWS::CertificateManager::Certificate
      Properties:
        DomainName: ${self:custom.domain}
        ValidationMethod: DNS
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.domain}
          CustomErrorResponses:
            - ErrorCachingMinTTL: 60
              ErrorCode: 404
              ResponseCode: 404
              ResponsePagePath: '/404.html'
          DefaultCacheBehavior:
            AllowedMethods:
              - GET
              - HEAD
            CachedMethods:
              - GET
              - HEAD
            Compress: true
            DefaultTTL: 86400
            ForwardedValues:
              Cookies:
                Forward: none
              QueryString: true
            MaxTTL: 31536000
            SmoothStreaming: false
            TargetOriginId: S3-${self:custom.s3BucketName}
            ViewerProtocolPolicy: 'redirect-to-https'
          DefaultRootObject: 'index.html'
          Enabled: true
          HttpVersion: http2
          IPV6Enabled: true
          Origins:
            - CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginKeepaliveTimeout: 5
                OriginProtocolPolicy: 'https-only'
                OriginReadTimeout: 30
                OriginSSLProtocols:
                  - TLSv1
                  - TLSv1.1
                  - TLSv1.2
              DomainName:
                Fn::GetAtt:
                - StaticSiteBucket
                - DomainName
              Id: S3-${self:custom.s3BucketName}
          PriceClass: PriceClass_All
          ViewerCertificate:
            AcmCertificateArn:
              Ref: CertificateManagerCertificate
              # Or you can hardcode your certificate ARN here if you want to deploy the lambda to other regions
            MinimumProtocolVersion: TLSv1.1_2016
            SslSupportMethod: sni-only
    DnsRecord:
      Type: AWS::Route53::RecordSet
      Properties:
        AliasTarget:
          DNSName:
            Fn::GetAtt:
            - CloudFrontDistribution
            - DomainName
          EvaluateTargetHealth: false
          HostedZoneId: ${self:custom.aliasHostedZone}
        HostedZoneId:
          Ref: HostedZone
        Name: ${self:custom.domain}.
        Type: 'A'

functions:
  compile:
    handler: handler.handler
    memorySize: 256
    environment:
      BUCKET_NAME: ${self:custom.s3BucketName}
      ANCHOR_ID: ${self:custom.anchorId}
      DOMAIN_NAME: ${self:custom.domain}
#    Rather than manual, you could also trigger it periodically
#    events:
#      - schedule: rate(2 hours)
